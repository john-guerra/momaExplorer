{"version":3,"sources":["NavioComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["console","log","navio","NavioComponent","_Component","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","_createClass","key","value","nn","d3","target","id","updateCallback","props","addTextAttrib","addSequentialAttrib","exponent","range","addDateAttrib","addBooleanAttrib","addCategoricalAttrib","concat","attribWidth","attribFontSize","data","newProps","length","_this","React","createElement","className","ref","Component","convert","map","image","src","ThumbnailURL","thumbnail","thumbnailWidth","thumbnailHeight","caption","Title","App","call","state","images","_this2","then","parseDate","forEach","row","date","Date","replace","slice","isNaN","setState","filteredData","href","bind","Gallery","rowHeight","enableImageSelection","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.92aa0d48.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport * as d3 from \"d3\";\n\n// import navio from \"./navio/navio.js\";\n\n\nimport navio from \"../node_modules/navio/dist/navio.esm.js\";\nimport \"./NavioComponent.css\";\n\n\nconsole.log(\"navio\", navio);\n\nclass NavioComponent extends Component {\n  componentDidMount() {\n    console.log(\"NavioComponent did mount\");\n    this.nn = navio(d3.select(this.target), 620)\n      .id(\"ObjectID\")\n      .updateCallback(this.props.updateCallback)\n      .addTextAttrib(\"Title\")\n      .addSequentialAttrib(\n        \"Height (cm)\",\n        d3\n          .scalePow()\n          .exponent(0.25)\n          .range([d3.interpolatePurples(0), d3.interpolatePurples(1)])\n      )\n      .addSequentialAttrib(\n        \"Width (cm)\",\n        d3\n          .scalePow()\n          .exponent(0.25)\n          .range([d3.interpolatePurples(0), d3.interpolatePurples(1)])\n      )\n      .addDateAttrib(\"date\")\n      // .addSequentialAttrib(\"Date\")\n      // .addSequentialAttrib(\"DateAcquired\")\n      .addBooleanAttrib(\"hasImage\")\n      .addCategoricalAttrib(\"Department\")\n      .addCategoricalAttrib(\"Classification\")\n      .addCategoricalAttrib(\"Medium\")\n      .addCategoricalAttrib(\"Gender\")\n      .addCategoricalAttrib(\n        \"Nationality\",\n        d3.scaleOrdinal(\n          d3.schemeSet3.concat(d3.schemeSet2).concat(d3.schemeSet1)\n        )\n      );\n\n    this.nn.attribWidth = 18;\n    this.nn.attribFontSize = 14;\n\n    if (this.props.data) {\n      this.nn.data(this.props.data);\n    }\n  }\n  // componentDidUpdate() {\n  //   if (this.props.data) {\n  //     this.nn.data(this.props.data);\n  //   }\n  // }\n\n  componentWillUpdate(newProps) {\n    console.log(\n      \"NavioComponent will update data.length=\" + newProps.data.length\n    );\n    if (newProps.data.length !== this.props.data.length)\n      this.nn.data(newProps.data);\n  }\n\n  render() {\n    console.log(\"NavioComponent render\");\n    return (\n      <div\n        className=\"NavioComponent\"\n        ref={target => (this.target = target)}\n      ></div>\n    );\n  }\n}\n\nNavioComponent.propTypes = {\n  data: PropTypes.array.isRequired,\n  updateCallback: PropTypes.func.isRequired\n};\n\nexport default NavioComponent;\n","import React, { Component } from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Switch\n// } from \"react-router-dom\";\n\nimport \"./App.css\";\n// import ImageGallery from \"./ImageGallery.js\";\nimport Gallery from \"react-grid-gallery\";\nimport NavioComponent from \"./NavioComponent.js\";\n// import Faceted from \"./Faceted\";\n\nimport * as d3 from \"d3\";\n\n\nfunction convert(data) {\n  return data.map((image) => {\n    return {\n      src : image.ThumbnailURL,\n      thumbnail : image.ThumbnailURL,\n      thumbnailWidth: 160,\n      thumbnailHeight: 87,\n      caption : image.Title\n    };\n  });\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data:[],\n      images:[]\n    };\n\n  }\n\n  componentDidMount() {\n    // d3.csv(\"./Artworks_less_columns.csv\", (err, data) => {\n    d3.csv(\"./Artworks_less_columns.csv\")\n      .then((data) => {\n      // if (err) throw err;\n        const parseDate = d3.timeParse(\"%Y-%m-%d\");\n        data.forEach((row) => {\n          row[\"Height (cm)\"] = +row[\"Height (cm)\"];\n          row[\"Width (cm)\"] = +row[\"Width (cm)\"];\n          row[\"DateAcquired\"] = parseDate(row[\"DateAcquired\"]);\n          row[\"hasImage\"] = row.ThumbnailURL ? true : false;\n          row.date = row.Date ? +(row.Date.replace( /^\\D+/g, \"\").slice(0,4)) : row.Date;\n          row.date = !isNaN(row.date) && row.date>1700 ? row.date : null;\n        });\n        this.setState({\n          images:convert(data.slice(0,51)),\n          // data:d3.range(20).reduce((p) => p.concat(data),[])\n          data:data\n        });\n      });\n    // fetch(\"http://localhost:8080/Artworks.csv.gz\")\n    //   .then((res) => {\n    //     return res.json();\n    //   }).then((data) => {\n    //     const parseDate = d3.timeParse(\"%Y-%m-%d\");\n    //     data.forEach((row) => {\n    //       row[\"Height (cm)\"] = +row[\"Height (cm)\"];\n    //       row[\"Width (cm)\"] = +row[\"Width (cm)\"];\n    //       row[\"DateAcquired\"] = parseDate(row[\"DateAcquired\"]);\n\n    //       row.date = row.Date ? +(row.Date.replace( /^\\D+/g, \"\").slice(0,4)) : row.Date;\n    //       row.date = !isNaN(row.date) && row.date>1700 ? row.date : null;\n    //     });\n    //     this.setState({\n    //       images:convert(data.slice(0,50)),\n    //       data:d3.range(1).reduce((p) => p.concat(data),[])\n    //     });\n    //   });\n  }\n\n  updateCallback(filteredData) {\n    this.setState({\n      images:convert(filteredData.slice(0,151))\n    });\n  }\n\n  render() {\n    console.log(\"Render App\");\n    return (\n      <div className=\"App\">\n        {//<ImageGallery images={this.state.data}></ImageGallery>\n        }\n        <h1><a href=\"https://github.com/john-guerra/navio\">Navio: MoMA</a> Collection</h1>\n        {this.state.data.length===0 ?\n          <h3>Please wait while we download 130k records</h3>\n          :\n          <div>\n            <NavioComponent\n              data={this.state.data}\n              updateCallback={this.updateCallback.bind(this)}>\n            </NavioComponent>\n            {/*\n            <Router >\n              <Switch>\n                <Route path=\"./\" render={() =>\n                  <NavioComponent\n                    data={this.state.data}\n                    updateCallback={this.updateCallback.bind(this)}>\n                  </NavioComponent>\n\n                } />\n                <Route path=\"./faceted\" render={() =>\n                  <Faceted\n                    data={this.state.data}\n                    updateCallback={this.updateCallback.bind(this)}>\n                  </Faceted>\n                } />\n              </Switch>\n            </Router>\n            */}\n            <Gallery\n              rowHeight={120}\n              enableImageSelection={false}\n              images={this.state.images}\n            />\n          </div>\n\n        }\n        <div className=\"footer\">\n          <p> All the images and data is property of the <a href=\"https://github.com/MuseumofModernArt/collection\">Museum of Modem Art of New York</a> that was released under a CC0 license.</p>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import \"./index.css\";\n// import registerServiceWorker from \"./registerServiceWorker\";\n// // import {  BrowserRouter as Router } from \"react-router-dom\";\n\n\n// import Routes from \"./routes\";\n\n\n\n// ReactDOM.render(\n//   <Routes />,\n//   document.getElementById(\"root\"));\n"],"sourceRoot":""}